generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(cuid())
  name         String?
  email        String?     @unique
  emailVerified DateTime?
  password     String
  address      String
  image        String?
  role         UserRole    @default(USER)
  bio          String?
  accounts     Account[]
  sessions     Session[]
  images       Image[]
  menu         Menu[]
  meals        FoodItem[]
  orders       Order[]     @relation("EaterOrders")
  reviewsReceived Review[] @relation("ReviewsReceived")
  reviewsGiven   Review[] @relation("ReviewsGiven")
}

model Image {
  id         String    @id @default(cuid())
  url        String
  userId     String
  foodItemId String?
  createdAt  DateTime  @default(now())
  foodItem   FoodItem? @relation(fields: [foodItemId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Menu {
  id          String     @id @default(cuid())
  name        String
  description String
  cookId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  foodItems   FoodItem[]
  cook        User       @relation(fields: [cookId], references: [id])
}

model FoodItem {
  id            String      @id @default(cuid())
  name          String
  description   String
  price         Float
  cookId        String
  menuId        String
  available     Boolean     @default(false)
  servings      Int         @default(0)
  servingsSold  Int         @default(0)
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cook          User        @relation(fields: [cookId], references: [id])
  menu          Menu        @relation(fields: [menuId], references: [id])
  images        Image[]
  orders        OrderItem[]
  reviews       Review[]
}

model Order {
  id        String      @id @default(cuid())
  eaterId   String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  eater     User        @relation("EaterOrders", fields: [eaterId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  foodItemId String
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewerId  String
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewedId  String
  reviewed    User     @relation("ReviewsReceived", fields: [reviewedId], references: [id])
  foodItemId  String?
  foodItem    FoodItem? @relation(fields: [foodItemId], references: [id])
}

enum UserRole {
  USER
  COOK
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
